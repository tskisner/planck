import logging as l
import pycfitsio
import numpy as np

import scipy.constants as physcon

from dipole import SatelliteVelocity

import quaternionarray as qarray
import private

from tabulate_corrections_calc import TabulatedAttitudeCorrections
#from IPython.Debugger import Tracer; debug_here = Tracer()

def arcmin2rad(ang):
    return np.radians(ang/60.)

def deaberration(vec, obt, coord):
    satvel = SatelliteVelocity(coord).orbital_v(obt)
    return np.cross(vec, np.cross(vec, satvel/physcon.c))

def simple_deaberration(vec, obt, coord):
    l.critical('Applying SIMPLE deaberration correction')
    satvel = SatelliteVelocity(coord, interp='linear').orbital_v(obt)
    return -1 * satvel/physcon.c

def get_wobble_psi2_maris(obt):
    TAC=TabulatedAttitudeCorrections(private.WOBBLE['sun_file'],private.WOBBLE['planck_file'])
    return np.radians(
                TAC.TabulatePsi2(obt*2**16) /60.
            )

def get_wobble_psi2(obt, filename=None):
    """Reads psi2 wobble angle from file generated by Michele's standalone code"""
    if filename is None:
        filename = private.WOBBLE['psi2_file']

    w = np.loadtxt(filename, delimiter=',', skiprows=1)

    return np.radians(
                np.interp(obt, w[:,1]/2**16, w[:,2])/60.
            )

def wobble(obt, wobble_psi2_model=get_wobble_psi2_maris, offset=0):
    """Gets array of OBT and returns an array of quaternions"""

    R_psi1 = qarray.inv(qarray.rotation([0,0,1], private.WOBBLE_DX7['psi1_ref']))
    R_psi2 = qarray.inv(qarray.rotation([0,1,0], private.WOBBLE_DX7['psi2_ref']))

    psi2 = wobble_psi2_model(obt) - offset
    R_psi2T = qarray.rotation([0,1,0], psi2)

    wobble_rotation = qarray.mult(qarray.inv(R_psi1),
                            qarray.mult(R_psi2T , 
                                qarray.mult(R_psi2 , R_psi1)
                            )
                        )

    #debug_here()
    return wobble_rotation

def ahf_wobble(obt):
    """Pointing period by pointing period correction for psi1 and psi2 from
    the AHF observation files"""

    R_psi1 = qarray.inv(qarray.rotation([0,0,1], private.WOBBLE['psi1_ref']))
    R_psi2 = qarray.inv(qarray.rotation([0,1,0], private.WOBBLE['psi2_ref']))

    psi1, psi2 = get_ahf_wobble(obt)

    R_psi2T = qarray.rotation([0,1,0], psi2)
    R_psi1T = qarray.rotation([0,0,1], psi1)

    wobble_rotation = qarray.mult(R_psi1T,
                            qarray.mult(R_psi2T , 
                                qarray.mult(R_psi2 , R_psi1)
                            )
                        )

    return wobble_rotation


def get_ahf_wobble(obtx):
    """Read psi1 and psi2 file previously extracted from observation AHF files"""
    filename = '/project/projectdirs/planck/user/seiffert/cal/WDX8/C070-0000-WDX8-20111116.fits'
    obt = pycfitsio.open(filename)['OBT'].read_column(0)/2**16
    psi1 = arcmin2rad(pycfitsio.open(filename)['PSI_1'].read_column(0))
    psi2 = arcmin2rad(pycfitsio.open(filename)['PSI_2'].read_column(0))
    i_interp = np.interp(obtx, obt, np.arange(len(obt)))
    i_rounded = np.floor(i_interp).astype(np.int)
    return psi1[i_rounded], psi2[i_rounded]

def read_ptcor1(od):
    data = np.loadtxt('/project/projectdirs/planck/user/zonca/software/testenv/testenv/private/tab_cor1.txt')
    i = data[:, 0].searchsorted(od)
    return data[i, 1], data[i, 2]

def ptcor1(od):
    # Boresight rotation of 85 degrees
    # pio.GetQuaternion("IMO:SAT:SVM:StarTracker:RATT_LOS:Quaternion",imop).q
    # for detilt_ring_t2
    q_str_LOS = np.array([ 0.99904822,  0.        ,  0.04361939,  0.        ])

    delta_inscan, delta_xscan = read_ptcor1(od)
    zn = np.array([delta_xscan, -delta_inscan, 1])
    zn /= np.linalg.norm(zn) 
    #Compute rotation quaternion from vectos
    qcor = qarray.from_vectors(np.array([0,0,1]),zn)

    qcor_tot = qarray.mult(q_str_LOS, qarray.mult(qcor, qarray.inv(q_str_LOS)))

    return qcor_tot
